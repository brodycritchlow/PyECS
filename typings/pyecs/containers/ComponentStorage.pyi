from pyecs.common.Types import Component as Component, Entity as Entity, SuccessOrFailure as SuccessOrFailure, UUID4 as UUID4
from pyecs.containers.Archetype import Archetype as Archetype
from pyecs.helpers.Deprecation import deprecated_external as deprecated_external
from pyecs.helpers.Statuses import StatusCodes as StatusCodes
from typing import Literal

class ComponentStorage:
    archetypes: dict[frozenset[type], Archetype]
    entity_to_archetype: dict[UUID4, frozenset[type]]
    def __init__(self) -> None: ...
    def add_component(self, entity: Entity, component: Component) -> Literal[StatusCodes.COMPONENT_ADDED, StatusCodes.COMPONENT_UPDATED, StatusCodes.FAILURE]: ...
    def remove_component[T: Component](self, entity: Entity, component_type: type[T]) -> Literal[StatusCodes.COMPONENT_REMOVED, StatusCodes.FAILURE]: ...
    def get_component[T: Component](self, entity: Entity, component_type: type[T]) -> Component | Literal[StatusCodes.FAILURE]: ...
    def has_component[T: Component](self, entity: Entity, component_type: type[T]) -> bool: ...
    def move_entity_to_archetype(self, entity: Entity, new_mask: frozenset[type], components: list[Component] | None = None) -> SuccessOrFailure: ...
    def remove_entity(self, entity: Entity) -> SuccessOrFailure: ...
    def get_entity_components(self, entity: Entity) -> list[Component]: ...
