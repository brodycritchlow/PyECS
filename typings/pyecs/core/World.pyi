from pyecs.common.Types import Component as Component, Entity as Entity
from pyecs.containers.Archetype import Archetype as Archetype
from pyecs.containers.ComponentStorage import ComponentStorage as ComponentStorage
from pyecs.helpers.Deprecation import warn_deprecated as warn_deprecated
from pyecs.helpers.Statuses import StatusCodes as StatusCodes
from pyecs.helpers.Unsafe import auto_unsafe as auto_unsafe
from pyecs.managers.EntityManager import EntityManager as EntityManager
from pyecs.managers.SystemManager import SystemManager as SystemManager
from pyecs.processing.System import System as System
from typing import Literal

class ECSWorld:
    entity_manager: EntityManager
    component_storage: ComponentStorage
    system_manager: SystemManager
    def __init__(self) -> None: ...
    def create_entity(self) -> Entity | Literal[StatusCodes.FAILURE]: ...
    def create_entity_or_raise(self) -> Entity: ...
    def destroy_entity(self, entity: Entity) -> None: ...
    def add_component(self, entity: Entity, component: Component) -> None: ...
    def remove_component(self, entity: Entity, component_type: type[Component]) -> None: ...
    def get_component(self, entity: Entity, component_type: type[Component]) -> Component | Literal[StatusCodes.FAILURE]: ...
    def get_component_or_raise(self, entity: Entity, component_type: type[Component]) -> Component: ...
    def get_components(self, entity: Entity, *component_types: type[Component]) -> tuple[Component, ...] | Literal[StatusCodes.FAILURE]: ...
    def get_components_or_raise(self, entity: Entity, *component_types: type[Component]) -> tuple[Component, ...]: ...
    def add_system(self, system: System) -> None: ...
    def remove_system(self, system: System) -> None: ...
    def update(self, dt: float) -> None: ...
