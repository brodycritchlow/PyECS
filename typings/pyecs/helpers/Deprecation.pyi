from collections.abc import Callable as Callable
from typing import Protocol

class DeprecatedCallable[**P, R](Protocol):
    __deprecated__: bool
    __deprecation_reason__: str | None
    __use_instead__: str | None
    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> R: ...

def deprecated_ecs[**P, R](reason: str | None = None, use_instead: str | None = None) -> Callable[[Callable[P, R]], Callable[P, R]]: ...
def deprecated_external[**P, R](reason: str | None = None, use_instead: str | None = None, allowed_modules: list[str] | None = None) -> Callable[[Callable[P, R]], Callable[P, R]]: ...
def warn_deprecated(message: str, use_instead: str | None = None, stacklevel: int = 3) -> None: ...
